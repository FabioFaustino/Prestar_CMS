// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prestar.Data;

namespace Prestar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210425135715_NewDb")]
    partial class NewDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Prestar.Models.About", b =>
                {
                    b.Property<int>("AboutID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AboutLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Illustration")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("LastUpdateUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("AboutID");

                    b.HasIndex("LastUpdateUserID");

                    b.ToTable("About");
                });

            modelBuilder.Entity("Prestar.Models.CommentAndEvaluation", b =>
                {
                    b.Property<int>("CommentAndEvaluationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Evaluation")
                        .HasColumnType("int");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<string>("UserCommentingID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CommentAndEvaluationID");

                    b.HasIndex("ServiceID");

                    b.HasIndex("UserCommentingID");

                    b.ToTable("CommentAndEvaluation");
                });

            modelBuilder.Entity("Prestar.Models.Complaint", b =>
                {
                    b.Property<int>("ComplaintID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComplaintTargetServiceServiceID")
                        .HasColumnType("int");

                    b.Property<string>("ComplaintTargetUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ComplaintType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ResolvedById")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserComplainingId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ComplaintID");

                    b.HasIndex("ComplaintTargetServiceServiceID");

                    b.HasIndex("ComplaintTargetUserId");

                    b.HasIndex("ResolvedById");

                    b.HasIndex("UserComplainingId");

                    b.ToTable("Complaint");
                });

            modelBuilder.Entity("Prestar.Models.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FormationID")
                        .HasColumnType("int");

                    b.Property<string>("RegisteredID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EnrollmentID");

                    b.HasIndex("FormationID");

                    b.HasIndex("RegisteredID");

                    b.ToTable("Enrollment");
                });

            modelBuilder.Entity("Prestar.Models.Formation", b =>
                {
                    b.Property<int>("FormationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("int");

                    b.Property<byte[]>("Illustration")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Local")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxEnrollment")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfRegistrations")
                        .HasColumnType("int");

                    b.Property<string>("ResponsibleID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FormationID");

                    b.HasIndex("ResponsibleID");

                    b.ToTable("Formation");
                });

            modelBuilder.Entity("Prestar.Models.Gamification", b =>
                {
                    b.Property<int>("GamificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GamificationName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("PointsPerComment")
                        .HasColumnType("int");

                    b.Property<int>("PointsPerEvaluation")
                        .HasColumnType("int");

                    b.Property<int>("PointsPerService")
                        .HasColumnType("int");

                    b.HasKey("GamificationID");

                    b.ToTable("Gamification");
                });

            modelBuilder.Entity("Prestar.Models.New", b =>
                {
                    b.Property<int>("NewsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Illustration")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("PrincipalNew")
                        .HasColumnType("bit");

                    b.Property<string>("SecondTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.Property<string>("WriterID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NewsID");

                    b.HasIndex("WriterID");

                    b.ToTable("New");
                });

            modelBuilder.Entity("Prestar.Models.Norm", b =>
                {
                    b.Property<int>("NormID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("WritterID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("NormID");

                    b.HasIndex("WritterID");

                    b.ToTable("Norm");
                });

            modelBuilder.Entity("Prestar.Models.Notification", b =>
                {
                    b.Property<int>("NotificationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinaryID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("NotificationID");

                    b.HasIndex("DestinaryID");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("Prestar.Models.PrivacyPolicy", b =>
                {
                    b.Property<int>("PrivacyPolicyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LastUpdateUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("PrivacyPolicyLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("PrivacyPolicyID");

                    b.HasIndex("LastUpdateUserID");

                    b.ToTable("PrivacyPolicy");
                });

            modelBuilder.Entity("Prestar.Models.PrivacyPolicySection", b =>
                {
                    b.Property<int>("PrivacyPolicySectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PrivacyPolicyID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("PrivacyPolicySectionID");

                    b.HasIndex("PrivacyPolicyID");

                    b.ToTable("PrivacyPolicySection");
                });

            modelBuilder.Entity("Prestar.Models.Request", b =>
                {
                    b.Property<int>("RequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("HandleDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RejectionMotive")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RequestHandlerID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RequestStatus")
                        .HasColumnType("int");

                    b.Property<int>("RequestType")
                        .HasColumnType("int");

                    b.Property<string>("RequisitionerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RequestID");

                    b.HasIndex("RequestHandlerID");

                    b.HasIndex("RequisitionerID");

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Prestar.Models.Section", b =>
                {
                    b.Property<int>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Illustration")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<int>("UserManualID")
                        .HasColumnType("int");

                    b.HasKey("SectionID");

                    b.HasIndex("UserManualID");

                    b.ToTable("Section");
                });

            modelBuilder.Entity("Prestar.Models.Service", b =>
                {
                    b.Property<int>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BlockMotive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<byte[]>("Illustration")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ServiceID");

                    b.HasIndex("ServiceCategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("Prestar.Models.ServiceCategory", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Illustration")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsSubcategory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ServiceCategoryCategoryID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID");

                    b.HasIndex("ServiceCategoryCategoryID");

                    b.ToTable("ServiceCategory");
                });

            modelBuilder.Entity("Prestar.Models.ServiceRequisition", b =>
                {
                    b.Property<int>("ServiceRequisitionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalRequestInfo")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("ConclusionDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("RequisitionerID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ServiceID")
                        .HasColumnType("int");

                    b.Property<int>("ServiceRequisitionStatus")
                        .HasColumnType("int");

                    b.HasKey("ServiceRequisitionID");

                    b.HasIndex("RequisitionerID");

                    b.HasIndex("ServiceID");

                    b.ToTable("ServiceRequisition");
                });

            modelBuilder.Entity("Prestar.Models.TermsAndConditionsSection", b =>
                {
                    b.Property<int>("TermsAndConditionsSectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.HasKey("TermsAndConditionsSectionID");

                    b.HasIndex("LastUpdateUserID");

                    b.ToTable("TermsAndConditionsSection");
                });

            modelBuilder.Entity("Prestar.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlockMotive")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("HasRemovedAccount")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("datetime2");

                    b.Property<int?>("LockoutDays")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("ReceiveNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowPhoneNumber")
                        .HasColumnType("bit");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Prestar.Models.UserManual", b =>
                {
                    b.Property<int>("UserManualID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastUpdateUserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserManualID");

                    b.HasIndex("LastUpdateUserID");

                    b.ToTable("UserManual");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Prestar.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Prestar.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestar.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Prestar.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prestar.Models.About", b =>
                {
                    b.HasOne("Prestar.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prestar.Models.CommentAndEvaluation", b =>
                {
                    b.HasOne("Prestar.Models.Service", "Service")
                        .WithMany("CommentsAndEvaluations")
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestar.Models.User", "UserCommenting")
                        .WithMany()
                        .HasForeignKey("UserCommentingID");

                    b.Navigation("Service");

                    b.Navigation("UserCommenting");
                });

            modelBuilder.Entity("Prestar.Models.Complaint", b =>
                {
                    b.HasOne("Prestar.Models.Service", "ComplaintTargetService")
                        .WithMany()
                        .HasForeignKey("ComplaintTargetServiceServiceID");

                    b.HasOne("Prestar.Models.User", "ComplaintTargetUser")
                        .WithMany()
                        .HasForeignKey("ComplaintTargetUserId");

                    b.HasOne("Prestar.Models.User", "ResolvedBy")
                        .WithMany()
                        .HasForeignKey("ResolvedById");

                    b.HasOne("Prestar.Models.User", "UserComplaining")
                        .WithMany()
                        .HasForeignKey("UserComplainingId");

                    b.Navigation("ComplaintTargetService");

                    b.Navigation("ComplaintTargetUser");

                    b.Navigation("ResolvedBy");

                    b.Navigation("UserComplaining");
                });

            modelBuilder.Entity("Prestar.Models.Enrollment", b =>
                {
                    b.HasOne("Prestar.Models.Formation", "Formation")
                        .WithMany("Enrollments")
                        .HasForeignKey("FormationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestar.Models.User", "Registered")
                        .WithMany()
                        .HasForeignKey("RegisteredID");

                    b.Navigation("Formation");

                    b.Navigation("Registered");
                });

            modelBuilder.Entity("Prestar.Models.Formation", b =>
                {
                    b.HasOne("Prestar.Models.User", "Responsible")
                        .WithMany()
                        .HasForeignKey("ResponsibleID");

                    b.Navigation("Responsible");
                });

            modelBuilder.Entity("Prestar.Models.New", b =>
                {
                    b.HasOne("Prestar.Models.User", "Writter")
                        .WithMany()
                        .HasForeignKey("WriterID");

                    b.Navigation("Writter");
                });

            modelBuilder.Entity("Prestar.Models.Norm", b =>
                {
                    b.HasOne("Prestar.Models.User", "Writter")
                        .WithMany()
                        .HasForeignKey("WritterID");

                    b.Navigation("Writter");
                });

            modelBuilder.Entity("Prestar.Models.Notification", b =>
                {
                    b.HasOne("Prestar.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("DestinaryID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prestar.Models.PrivacyPolicy", b =>
                {
                    b.HasOne("Prestar.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prestar.Models.PrivacyPolicySection", b =>
                {
                    b.HasOne("Prestar.Models.PrivacyPolicy", "PrivacyPolicy")
                        .WithMany("Sections")
                        .HasForeignKey("PrivacyPolicyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PrivacyPolicy");
                });

            modelBuilder.Entity("Prestar.Models.Request", b =>
                {
                    b.HasOne("Prestar.Models.User", "Handler")
                        .WithMany()
                        .HasForeignKey("RequestHandlerID");

                    b.HasOne("Prestar.Models.User", "Requisitioner")
                        .WithMany()
                        .HasForeignKey("RequisitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Handler");

                    b.Navigation("Requisitioner");
                });

            modelBuilder.Entity("Prestar.Models.Section", b =>
                {
                    b.HasOne("Prestar.Models.UserManual", "UserManual")
                        .WithMany("Sections")
                        .HasForeignKey("UserManualID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserManual");
                });

            modelBuilder.Entity("Prestar.Models.Service", b =>
                {
                    b.HasOne("Prestar.Models.ServiceCategory", "ServiceCategory")
                        .WithMany()
                        .HasForeignKey("ServiceCategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestar.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");

                    b.Navigation("ServiceCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prestar.Models.ServiceCategory", b =>
                {
                    b.HasOne("Prestar.Models.ServiceCategory", null)
                        .WithMany("ServiceCategories")
                        .HasForeignKey("ServiceCategoryCategoryID");
                });

            modelBuilder.Entity("Prestar.Models.ServiceRequisition", b =>
                {
                    b.HasOne("Prestar.Models.User", "Requisitioner")
                        .WithMany()
                        .HasForeignKey("RequisitionerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prestar.Models.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Requisitioner");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Prestar.Models.TermsAndConditionsSection", b =>
                {
                    b.HasOne("Prestar.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prestar.Models.UserManual", b =>
                {
                    b.HasOne("Prestar.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("LastUpdateUserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prestar.Models.Formation", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Prestar.Models.PrivacyPolicy", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("Prestar.Models.Service", b =>
                {
                    b.Navigation("CommentsAndEvaluations");
                });

            modelBuilder.Entity("Prestar.Models.ServiceCategory", b =>
                {
                    b.Navigation("ServiceCategories");
                });

            modelBuilder.Entity("Prestar.Models.UserManual", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
